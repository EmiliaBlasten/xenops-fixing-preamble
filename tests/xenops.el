;; -*- lexical-binding: t -*-

(setq xenops-test-svg
      "<?xml version='1.0' encoding='UTF-8'?>
<!-- This file was generated by dvisvgm 2.3.5 -->
<svg height='1.992528pt' version='1.1' viewBox='-0.996264 -0.996264 1.992528 1.992528' width='1.992528pt' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>
<g id='page1' transform='matrix(1.253143 0 0 1.253143 0 0)'>
<rect fill='#ffffff' height='0' width='0' x='0' y='0'/>
</g>
</svg>")

(defun xenops-test-mock-xenops-math-create-latex-image (element _ _ _ file callback)
  (with-temp-buffer
    (insert xenops-test-svg)
    (write-file file))
  (funcall callback element))

(defmacro xenops-render--do-test (buffer-contents &rest body)
  `(cl-letf (((symbol-function 'xenops-math-create-latex-image)
              #'xenops-test-mock-xenops-math-create-latex-image))
     (let ((xenops-cache-directory (make-temp-file "xenops-test-" 'dir))
           ;; We are relying on this file being treated as its own master file by
           ;; `TeX-region-create'. If the file name does not end in .tex, then a master file will be
           ;; sought with the .tex suffix, and this will fail.
           (file (make-temp-file "xenops-test-" nil ".tex"))
           (before "\\documentclass{article}\n\\begin{document}\n")
           (after "\n\\end{document}"))
       (with-temp-buffer
         (insert (concat before ,buffer-contents after))
         (write-file file)
         (LaTeX-mode)
         (xenops-mode)
         (mark-whole-buffer)
         (xenops-render)
         (goto-char (length before))
         ,@body))))

(defun xenops-render--do-image-test (buffer-contents element-begin expected-type)
  (xenops-render--do-test
   buffer-contents
   (forward-char element-begin)
   (let ((element (xenops-apply-parse-at-point)))
     (should (equal (plist-get element :type) expected-type)))
   (let ((image (xenops-parse-image-at (point))))
     (should (equal (image-property image :type) 'svg)))))

(defun xenops-render--do-src-test (buffer-contents element-begin expected-type keyword)
  (xenops-render--do-test
   buffer-contents
   (forward-char element-begin)
   (should (or (looking-at (caar (xenops-elements-get 'src :delimiters)))
               (looking-at (caar (xenops-elements-get 'minted :delimiters)))))
   (let ((element (xenops-apply-parse-at-point)))
     (should (equal (plist-get element :type) expected-type)))
   (should (not (xenops-parse-image-at (point))))
   (search-forward keyword)
   (goto-char (match-beginning 0))
   ;; (font-lock-fontify-buffer)
   ;; (should (equal (face-at-point) 'font-lock-keyword-face))
   ))

(ert-deftest xenops-render--inline-math ()
  (xenops-render--do-image-test "123$e^{2i\\pi}$maths." 4 'inline-math))

(ert-deftest xenops-render--block-math ()
  (xenops-render--do-image-test
   "Hello.
\\begin{align*}
  e^{2i\\pi}
\\end{align*}
" 8 'block-math))

(ert-deftest xenops-render--minted ()
  (xenops-render--do-src-test
   "Hello.
\\begin{minted}{emacs-lisp}
 (defun f ())
\\end{minted}
 " 8 'minted "defun"))

(ert-deftest xenops-render--src ()
  (xenops-render--do-src-test
   "Hello.
 #+begin_src emacs-lisp
 (defun f ())
 #+end_src
 " 8 'src "defun"))

(ert-deftest xenops-render--table ()
  (xenops-render--do-image-test
   "This is a table.
\\begin{tabular}{c||c|c|c|c|c|}
    & e & a & b & c & d\\\\
  \\hline
  \\hline
  e & e & a & b & c & d\\\\
  a & a & b & c & d & e\\\\
  b & b & c & d & e & a\\\\
  c & c & d & e & a & b\\\\
  d & d & e & a & b & c
\\end{tabular}\\\\
" 18 'table))

(ert-deftest xenops-render--table-R ()
  (xenops-render--do-image-test
   "% latex table generated in R 3.6.1 by xtable 1.8-4 package
% Tue Dec 10 23:53:04 2019
\\begin{table}[ht]
\\centering
\\begin{tabular}{rrrrr}
  \\hline
 & Estimate & Std. Error & t value & Pr($>$$|$t$|$) \\\\
  \\hline
(Intercept) & -0.2814 & 0.1055 & -2.67 & 0.0090 \\\\
  x & 0.9928 & 0.1014 & 9.79 & 0.0000 \\\\
   \\hline
\\end{tabular}
\\end{table}
" 87 'table))
